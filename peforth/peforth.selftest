<comment>
    
    \
    \ 取出整個 selftest buffer 
    \ py> tick('<self'+'test>').buffer char peforth-selftest.f writeTextFile stop 
    \
    \ 經過 15:34 2017-09-17 on MetaMoji 的討論，這個 selftest 的方法只適合從頭做起的
    \ jeforth 開發階段。來到 peforth 時是從先前的 jeforth 繼承過來的，本有的 selftest
    \ sections 順序已經不對，若還想要整理到讓它們都跟在各自 word 的 source code 旁邊
    \ 太累，也沒必要。因此，略施小計如上，把 selftest section 整個都抓在一起，集中編
    \ 輯比較方便。
    \


    程式只要稍微大一點點，附上一些 self-test 讓它伺機檢查自身，隨便做做穩定性
    就會提升。 Forth 的結構全部都是 global words， 改動之後難以一一去檢討影響
    到了哪些 words，與其努力抓 bug 不如早點把 self-test 做進去。
 
    project-k kernel 裡只有 code end-code 兩個基本 forth words。只憑這兩個 words 
    就馬上要為每個 word 都做 self-test 原本很困難。然而 peforth.f 是整個檔案一次
    讀進來成為大大的一個 TIB 的， 所以其中已經含有全部功能。如果 self-test 安
    排在所有 words 都 load 好以後做就不困難。利用〈selftest〉〈/selftest〉這對
    「文字蒐集器」在任意處所「蒐集測試程式」，最後一次把它當成 TIB 執行。實用上
    〈selftest〉〈/selftest〉出現在每個 word 定義處，裡頭可以放心自由地使用尚
    未出生的「未來 words」, 對寫程式時的頭腦有很大的幫助。 

    我嘗試了種種的 self-test 寫法。有的很醜，混在正常程式裡面有礙視線；不醜的很
    累，佔很大 source code 篇幅。以上是發展到目前最好的方法。

    Self-test 的執行時機是程式開始時，或開機時。沒有特定任務就做 self-test.
    include 各個 modules 時，循序就做 self-test。藉由 forth 的 marker, (forget) 
    等 self-test 用過即丟， 只花時間，不佔空間。花平時的開發時間不要緊，有特定任
    務時就跳過 self-test 不佔執行系統時間、空間，只佔 source code 的篇幅。
    
</comment>

<selftest>

    *** /// add comment to the last word 
        --- marker ---
        : dummy ; /// 98787665453
        ' dummy :> comment.find('98787665453')!=-1 ( True )
        [d True d] [p '///',':',';','marker' p] 
    *** immediate makes the LAST an immediate word
        --- marker ---
        : dummy ; immediate
        ' dummy :> immediate ( True )
        [d True d] [p 'immediate' p] 
    *** compyle source code to function 
        display-off
        <text> print("Hi! Harry, nice to meet you.") </text> compyle execute
        display-on
        screen-buffer <py> pop()[0].find('nice to meet you')!=-1 </pyV> ( True )
        [d True d] [p 'compyle','<text>','</text>',"'<text>",'(<text>)' p]
    *** </pyV> based on </py> and on compyle
        --- marker ---
        : try char 123 [compile] </pyV> ; try ( 123 )
        : try2 [ char "abc" ] </pyV> ; try2 ( 123 'abc' )
        [d 123,'abc' d] [p 'compyle','</py>','</pyV>' p]
    *** interpret-only marks the last word an interpret-only word
        ' execute py> getattr(pop(),'interpretonly',False) ( False ) 
        ' interpret-only :> interpretonly==True ( True )
        [d False,True d] [p "interpret-only" p]
    *** immediate marks the last word an immediate word
        ' execute py> getattr(pop(),'immediate',False) ( False ) 
        ' \ :> immediate==True ( True )
        [d False,True d] [p "immediate" p]
    *** compile-only marks last word as a compile-only word
        ' execute py> getattr(pop(),'compileonly',False) ( False )  
        ' if :> compileonly==True ( True )
        [d False,True d] [p "compile-only" p]
    *** literal is a compiling comamnd that can improve run time performance
        : test [ py> sum(range(101)) literal ] ;
        display-off see test display-on
        screen-buffer <py> pop()[0].find('Literal: 5050')!=-1 </pyV> ( True )            
        [d True d] [p "(create)","(forget)",'char','literal' p]
        --- marker --- 
    *** (create) creates a new word
        char ~(create)~ (create) py> last().name \ ( "~(create)~" )
        (forget) py> last().name=="~(create)~" \ ( "~(create)~" False ) 
        [d "~(create)~",False d] [p "(create)","(forget)",'char' p]
    *** ' (tick) gets word object 
        ' code :> name [d 'code' d] [p "'" p]
    *** "drop" drops the TOS
        321 123 s" drop" execute \ 321
        654 456 ' drop execute \ 321 654
        [d 321,654 d] [p 'drop', "'", "execute", '\\' p]
    *** here points to next available address 
        --- marker ---
        \ Assume dictionary is clean from garbages
        here >r : test ; here 1+ py> len(dictionary) = ( True | here )
        [d True d] [p 'here' p]
        \ here! 靠 allot 檢查，只它用到。
    *** version should return a floating point number
        display-off
        version 
        display-on 
        float type py> pop()==float ( True )
        screen-buffer <py> pop()[0].find('p e f o r t h')!=-1 </pyV> ( True )
        [d True,True d]
        [p 'version','py:','(','float' p]
    *** (space) puts a 0x20 on TOS
        (space) char>ASCII 32 = 
        [d True d] [p "(space)","=","char>ASCII" p]
    *** BL should return the string '\s' literally
        BL [d "\\s" d] [p "BL" p]
    *** CR should return the string \n|\r literally
        CR py> "\\n|\\r" = 
        [d True d] [p "CR","=" p]                       
    *** word reads "string" from TIB
        --- marker ---
        BL word        11    22 33 ( '11',22,33 )
        char 5 word    11    55 66 ( '   11    ',55,66 )
        : </div> ; char </div> word    
            此後到 '</'+'div>' 之
            前都被收進，可
            以跨行！ come-find-me-!!
        </div> :> find("come-find-me-!!")!=-1 ( True )
        [d '11',22,33,'   11    ',55,66,True d] 
        [p "word",'BL',':>','char' p]
    *** py> eval(pop()) should eval(tos) 
        --- marker ---
        456 char pop()+1 py> eval(pop()) [d 457 d] [p "py>" p]
    *** last should return the last word
        0 constant xxx
        last :> name [d "xxx" d] [p "last","constant",'(constant)' p]
        (forget)
    *** exit should stop a colon word
        : dummy 123 exit 456 ;
        last execute [d 123 d] [p "exit" p]
        (forget)
    *** (forget) forgets the last word 
        ' dummy [d 0 d] [p "(forget)" p]
    *** begin ... again loop covers many things
        : sum 0 1 begin 2dup + -rot nip 1+ dup 10 > 
        if drop exit else then again ; sum
        [d 55 d] [p '2dup', '-rot', 'nip', '1+', '>', 
        '0branch', 'if', 'then','else','begin','again' p]
        --- marker ---
    *** ! @ >r r> r@ drop dup swap over 0<
        variable x 123 x ! x @ 123 = \ True
        111 dup >r r@ r> + swap 2 * = and \ True
        333 444 drop 333 = and \ True
        555 666 swap 555 = \ True 666 True
        rot and swap \ True 666
        0< not and \ True
        -1 0< and \ True
        false over \ True
        [d True, False, True d] [p '!', '@', '>r', 'r>', 'r@', 'swap', 'drop',
        'dup', 'over', '0<', '2drop','marker' p]
        --- marker ---
    *** ' tick and (') should return a word object
        ' code :> name char end-code (') :> name
        [d "code","end-code" d] [p "'","(')" p]
    *** bool and or not AND OR NOT XOR
        none not \ True
        "" bool \ False
        [] bool \ False
        {} bool \ False
        {} [] and \ False
        true false or \ True
        1 2 AND \ 0
        1 2 OR NOT  \ -4
        1 2 XOR \ 3
        [d True,False,False,False,False,True,0,-4,3 d] 
        [p 'bool','and','or','not','AND','OR','NOT','XOR',
        'true','false','""','[]','{}','none' p] 
    *** + * - / 1+ 2+ 1- 2-
        1 1 + 2 * 1 - 3 / 1+ 2+ 1- 2- 1 = [d True d]
        [p '+', '*', '-', '/', '1+', '2+', '1-', '2-' p]
    *** >> -1 signed right shift n times will be still -1
        -1 9 >> [d -1 d] [p ">>" p]
    *** >> -4 signed right shift becomes -2
        -4 1 >> [d -2 d] [p ">>" p]
    *** << -1 signed left shift 63 times become the smallest int number
        -1 31 << 0x80000000 -1 * = [d True d] [p "<<" p]
    *** 0= 0<> 0> 0>= 0< 0<=
        "" 0= \ False
        none 0= \ False
        {} 0<> \ True
        1 0> \ True
        0 0> \ False
        -2739473 0<= \ True
        py> 123e-456 0>= \ True
        false 0= \ True
        s" 123" 123 = \ False
        0 "" <> \ True
        [d False, False, True, True, False, True, True, True, False, True d]
        [p '0=', '0>', '0>=','0<>', '0<=', '0<', '=', '<>' p]
    *** == compares tos(1) and tos() after booleanized
        {} [] = \ False
        {} [] == \ True
        "" none = \ False
        "" none == \ True
        s" 123" 123 = \ False
        s" 123" 123 == \ True
        [d False,True,False,True,False,True d] [p "=","==",'""',"none", 
        "{}","[]" p]
    *** > < >= <= != != <>
        1 2 > \ False
        1 1 > \ False
        2 1 > \ True
        1 2 < \ True
        1 1 < \ False
        2 1 < \ False
        1 2 >= \ False
        1 1 >= \ True
        2 1 >= \ True
        1 2 <= \ True
        1 1 <= \ True
        2 1 <= \ False
        1 1 <> \ False
        0 1 <> \ True
        [d False,False,True,True,False,False,False,True,True,True,True,False,False,True d]
        [p '<', '>=', '<=', '!=', '<>' p]
    *** abs makes negative positive
        -1 10 << abs [d 1024 d] [p "abs","<<" p]
    *** max min within
        1 -2 3 max max (  3 )
        1 -2 3 min min ( -2 )
        1 2 3 within ( False )
        2 1 3 within ( True )
        [d 3,-2,False,True d] [p "max","min" p]
    *** doVar doNext
        variable x
        : tt for x @ . x @ 1+ x ! next ;
        display-off
        10 tt space \ "0123456789 "
        x @ ( 10 )
        display-on
        screen-buffer <py> pop()[0].find('0123456789 ')!=-1 </pyV> ( True )
        [d 10,True d]
        [p 'doNext','space', ',', 'colon-word', 'create',
        'for', 'next' p]
        --- marker ---
    *** pick 2 from 1 2 3 gets 1 2 3 1
        1 2 3 0 pick 3 = depth 4 = and >r 3 drops \ True
        1 2 3 1 pick 2 = depth 4 = and >r 3 drops \ True
        1 2 3 2 pick 1 = depth 4 = and >r 3 drops \ True
        r> r> r> [d True,True,True d] [p "pick",">r","r>" p]
    *** roll 2 from 1 2 3 gets 2 3 1
        1 2 3 0 roll 3 = depth 3 = and >r 2 drops \ True
        1 2 3 1 roll 2 = depth 3 = and >r 2 drops \ True
        1 2 3 2 roll 1 = depth 3 = and >r 2 drops \ True
        r> r> r> [d True,True,True d] [p "roll" p]
    *** [compile] compile [ ]
        : iii ; immediate
        : jjj ;
        : test [compile] iii compile jjj ; \ 正常執行 iii，把 jjj 放進 dictionary
        : use [ test ] ; \ 如果 jjj 是 immediate 就可以不要 [ ... ]
        ' use py> pop().cfa @ ' jjj = [d True d]
        [p "[compile]",'compile', '[', ']' p]
        --- marker ---
    *** alias should create a new word that acts same
        1234 constant x ' x alias y
        y [d 1234 d] [p "alias" p] 
        --- marker ---
    *** nip rot -rot 2drop 2dup invert negate within
        1 2 3 4 nip \ 1 2 4
        -rot \ 4 1 2
        2drop \ 4
        3 2dup \ 4 3 4 3
        invert negate \ 4 3 4 4
        = rot rot \ True 4 3
        5 within \ True True
        1 2 3 within \ True True False
        4 2 3 within \ True True False False
        -2 -4 -1 within \ True True False False True
        0 -4 -1 within \ True True False False True False
        -5 -4 -1 within \ True True False False True False False
        [d True,True,False,False,True,False,False d]
        [p 'rot', '-rot', '2drop', '2dup', 'negate', 'invert', 'within' p]
    *** ['] tick next word immediately
        --- marker ---
        : x ;
        : test ['] x ;
        test ' x = [d True d] [p "[']" p]
    *** allot should consume some dictionary cells
        : a ; : b ; ' b :> cfa ' a :> cfa - \ normal distance
        : aa ;
        10 allot
        : bb ; ' bb :> cfa ' aa :> cfa - swap - \ 10 more expected
        [d 10 d] [p "allot" p]
        --- marker ---
    *** begin again , begin until
        : tt
            1 0 \ index sum
            begin \ index sum
                over \ index sum index
                + \ index sum'
                swap 1+ \ sum' index'
                dup 10 > if \ sum' index'
                    drop
                    exit
                then  \ sum' index'
                swap  \ index' sum'
            again
        ; last execute 55 = \ True
        : ttt
            1 0 \ index sum
            begin \ index sum
                over \ index sum index
                + \ index sum'
                swap 1+ \ sum' index'
                swap \ index' sum'
            over 10 > until \ index' sum'
            nip
        ; last execute 55 = \ True
        [d True,True d] [p 'again', 'until', 'over', 'swap', 'dup', 'exit', 'nip' p]
        --- marker ---
    *** aft for then next ahead begin while repeat
        --- marker ---
        : tt 5 for r@ next ; last execute + + + + 15 = \ True
        : ttt 5 for aft r@ then next ; last execute + + + 10 = \ True True
        depth 2 = \ T T T
        : tttt
            0 0 \ index sum
            begin \ idx sum
                over 10 <=
            while \ idx sum
                over +
                swap 1+ swap
            repeat \ idx sum
            nip
        ; last execute 55 = \ T T T T
        [d True,True,True,True d]
        [p 'for', 'then', 'next', 'ahead', 'begin', 'while', 'repeat' p]
    *** ?dup dup only when it's True
        1 0 ?dup \ 1 0
        2 ?dup \ 1 0 2 2 
        [d 1,0,2,2 d] [p "?dup" p]
    *** +! variable
        --- marker ---
        variable x 10 x !
        5 x +! x @ ( 15 )
        [d 15 d] [p 'variable', 'marker', '+!', '@', '!', '(' p]
    *** spaces chars
        : test 3 spaces ;
        display-off
        test
        display-on
        screen-buffer <py> pop()[0][-3:]=='   ' </pyV> ( True )
        [d True d] [p 'chars',"spaces","(space)" p]
        --- marker ---
    *** .( ( ." .' s" s' s`
        --- marker ---
        display-off
        .( ff) ( now vm.screenbuffer should be 'ff' )
        screen-buffer <py> pop()[0][-2:]=='ff' </pyV> ( True )
        : test ." aa" .' bb' s' cc' . s` dd` . s" ee" . ;
        test 
        screen-buffer <py> pop()[0][-10:]=='aabbccddee' </pyV> ( True )
        display-on
        [d True,True d] [p '(', '."', ".'", "s'", "s`", 's"' p]
        --- marker ---
    *** count
        s" abc" count depth
        [d "abc",3,2 d] [p "count" p]
        --- marker ---
    *** value and to work together
        112233 value x x 112233 = \ True
        445566 to x x 445566 = \ True
        : test 778899 to x ; test x 778899 = \ True
        [d True,True,True d] [p 'value','to' p]
        --- marker ---
    *** <comment>...</comment> can be nested now
        <comment> 
            aaaa <comment> bbbbbb </comment> cccccc 
        </comment> 
        111 222 <comment> 333 </comment> 444
        [d 111,222,444 d] [p '<comment>', '</comment>', '::' p]
    *** constant value and to
        112233 constant x
        x value y
        x y = \ True
        332211 to y x y = \ False
        ' x :> type=="constant" \ True
        ' y :> type=="value" \ True
        [d True,False,True,True d] [p "constant","value","to" p]
        --- marker ---
    *** int 3.14 is 3, 12.34 is 12
        3.14 int char 12.34 float int
        [d 3,12 d] [p "int","float" p]
    *** drops n data stack cells ...
        1 2 3 4 5 2 drops [d 1,2,3 d] [p "drops" p]
    *** dropall clean the data stack
        1 2 3 4 5 dropall depth 0= [d True d] [p "dropall","0=" p]
    *** ASCII char>ASCII ASCII>char
        char abc char>ASCII ( 97 )
        98 ASCII>char ( b )
        : test ASCII c ; test ( 99 )
        [d 97,'b',99 d] [p 'char>ASCII', 'ASCII>char', "ASCII" p]
        --- marker ---
    *** .s is probably the most frequently used word
        display-off
        32424 -24324 .s
        display-on
        screen-buffer <py> pop()[0].find('32,424')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('7EA8h')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('-24,324')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('-5F04h')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('2:')==-1 </pyV> ( True )
        [d 32424,-24324,True,True,True,True,True d] [p ".s" p]
        --- marker ---
    *** see (see)
        : test ; // test.test.test
        display-off
        see test
        py> {'aa':11,'bb':22} (see)
        display-on
        screen-buffer <py> pop()[0].find('test.test.test')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('cfa')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('colon')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('"bb": 22')!=-1 </pyV> ( True )
        [d True,True,True,True d] [p 'see','(see)','stringify','dump2ret' p]
        --- marker ---
    *** trim indent -indent
        <text>
        aa
            bb
        </text> constant ss
        ( true  ) ss :>~ find("    aa")!=-1
        ( false ) ss -indent :>~ find("    aa")!=-1
        ( true  ) ss -indent :>~ find("    bb")!=-1
        ( true  ) ss -indent indent :>~ find("    aa")!=-1
        ss :> split('\n') s"  " :> join(pop()) trim \ "aa            bb"
        [d True,False,True,True,"aa             bb" d]
        [p 'trim', 'indent', '-indent',':>~','(:>)' p]
        --- marker ---
    *** py:~ py>~ 
        py:~ push ( 1234 )
        py>~ pop() / 100
        [d 12.34 d] [p 'py:~','py>~' p]
    *** here here! , ? allot
        here \ h0
        10 allot here \ h0+10
        123 , 456 , here \ h0+10+2
        py> tos(2) here! here 789 , @ \ h0 h0+10 h0+12 789 
        py> pop(1) py> tos(3) - \  h0 h0+10 789 12
        py> pop(2) py> tos(3) - \  h0 789 12 10
        py> pop(3) here! \ 789 12 10
        display-off
        here ? 
        display-on
        screen-buffer <py> pop()[0].find('789')!=-1 </pyV> ( True )
        [d 789,12,10,True d] [p 'here','here!',',','allot','?' p]
    *** create does> 
        : bonjour
            create ,
            does> ." Hello " r> @ . cr ;
        char Bill bonjour William
        display-off
        William
        display-on
        screen-buffer <py> pop()[0].find('Hello Bill')!=-1 </pyV> ( True )
        [d True d] [p 'create','does>','doVar' p]
        --- marker ---
    *** words help 
        display-off
        words
        display-on 
        screen-buffer <py> pop()[0].find('code end-code')!=-1 </pyV> ( True )
        display-off
        help
        display-on
        screen-buffer <py> pop()[0].find('d] ( -- boolean )')!=-1 </pyV> ( True )
        [d True,True d] [p 'words','help' p]

    *** dict>keys dir type
        py> words dict>keys list :> [0]=='forth' ( True )
        123 dir py> type(pop())==list ( True )
        123 type py> type(pop())==type ( True ) 
        [d True,True,True d] [p 'dict>keys','dir','type' p]
    *** [if] [else] [then] [begin] [again] [until] [for] [next] 
        py:~ import time
        py> sys.modules['time'].time() int
        [begin] ( char . . ) py> sys.modules['time'].time() int over != [until] drop
        py> sys.modules['time'].time() int
        [begin] ( char . . ) py> sys.modules['time'].time() int over != 
        [if] drop [else] [again] [then]
        0 100 [for] t@ + [next] ( 5050 )
        [d 5050 d] [p '[if]','[else]','[then]','[begin]',
        '[again]','[until]','[for]','[next]','>t','t@','t>' p]
    *** du dump 
        display-off
        du 0
        du
        du
        du
        du
        du
        du
        10 800 dump ( 10 + 800 )
        display-on
        screen-buffer <py> pop()[0].find('00000: 0')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('00798: ')!=-1 </pyV> ( True )
        screen-buffer <py> pop()[0].find('00799: ')!=-1 </pyV> ( True )
        [d 810,True,True,True d] [p '<accept>','</accept>','accept','du','dump',
        '(dump)','toString', '.literal', '.function' p]

    *** [r r]
        11 >r 22 >r [r 11, 22, 0 r] \ 檢查 rstack 最後要固定多放一個 0, [r ... r] 的結果應為 True.
        [d True d] [p '[r','r]' p]

        <comment>
        Run the below line to list words that have not passed its selftest
        <py> [w.name for w in words['forth'][1:] if 'pass'!=getattr(w,'selftest',False)] </pyV> cr . cr
         'readTextFile', 'writeTextFile',  'inport',
        </comment>

    *** End of peforth.f self-test
        \ 這些 words 都武斷地算 pass 了
        [d d] [p 'cls','compiling','reveal','screen-buffer','display-off','display-on',
        '***','[all-pass]','all-pass','description', 'expected_rstack', 'expected_stack',
        'test-result','(marker)','bye', 'stop','.',
        'privacy', 'private', 'nonprivate', 'ret', 'rescan-word-hash', 
        'branch', 'abort', 'public', 'never', 'aft', '?stop', 'nop', '\x04', 
        'refill', '"msg"abort', 'abort"', '"msg"?abort', '?abort"', 
        '*debug*','tib.insert', 'sinclude', 'include', p]

</selftest>